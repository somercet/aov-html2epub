#!/bin/bash

# Converts an HTML file to EPUB 3.0 format
#
# Peter Buxton <somercet@gmail.com>
# Angel Ortega <angel@triptico.com>
#
# Public domain

LIB="$HOME/bin/epub3"

declare -a SUBJECT IMAGE AUTHOR TITLE

EPUB=""
COVER=""
HTML=""
CSS=""
TTF=""
ELANG="en-US"
MAKER=""
TRANSLATOR=""
PUBLISHER=""
LICENSE="Creative Commons BY-SA 4.0 License"
UUID=""
OPS=""
DEBUG=false

FILES=""
XTRA=""

usage () {
    cat << EOM >> /dev/stderr
Usage: $( basename $0 ) EPUB_FILE -t "title" [OPTION]... [FILE]...

Options:
 -t title            Title *required*
 -a author           Author 'First Last[|Last, First]'
 -s subject          Subject(s)
 -p maker            EPUB maker
 -P publisher        Publisher
 -T translator       Translator
 -d date             First published date (ISO 8601)
 -c cover.img        Cover image
 -l lang             Language (BCP 47, default "en-US")
 -L licence          Copyright or license, default "none"
 -u UUID             Universal Unique ID
 -D OPS              Build subdirectory (OPS or OEBPS)
 --debug             Keep output files for debugging
EOM
}


# parse arguments
while [[ $# -ne 0 ]]
do
    case $1 in
    -t)         TITLE+=("$2")                   ; shift ;;
    -a)         AUTHOR+=("$2")                  ; shift ;;
    -c)         COVER="$2"                      ; shift ;;
    -l)         ELANG="$2"                      ; shift ;;
    -p)         MAKER="$2"                      ; shift ;;
    -P)         PUBLISHER="$2"                  ; shift ;;
    -T)         TRANSLATOR="$2"                 ; shift ;;
    -u)         UUID="$2"                       ; shift ;;
    -d)         DATE="$2"                       ; shift ;;
    -L)         LICENSE="$2"                    ; shift ;;
    -s)         SUBJECT+=("$2")                 ; shift ;;
    -D)         OPS="$2"                        ; shift ;;
    --debug)    DEBUG=true                              ;;
    *.epub)     EPUB="$1"                               ;;
    *.xhtml | *.html)
                HTML="${HTML} $1"                       ;;
    *.jpg | *.png | *.gif)
                IMAGE+=("$1")                           ;;
    *.ttf | *.woff)
                TTF="${TTF} $1"                         ;;
    *.css)      CSS="${CSS} $1"                         ;;
    *)          echo "$0: invalid argument $1" > /dev/stderr
                     usage
                     exit 1 ;;
    esac
    shift
done

{  # error checks
    if [[ -z "$HTML" ]] ; then
        echo "$0: No HTML files; aborting."
        exit 2
    elif [[ -z "$EPUB" ]] ; then
        echo "$0: No EPUB file named; aborting."
        exit 2
    elif [[ -w . ]] ; then
        rm -f ${EPUB}
    else
        echo "$0: No write permission in $PWD; aborting."
        exit 3
    fi
} > /dev/stderr

##################################################

if [[ -z "$UUID" ]] ; then
    if which uuidgen 2>&1 >/dev/null ; then
        UUID="$(uuidgen)"
    else
        UUID="c5be00f9-932e-4903-8cd9-b4b5939411a6"
    fi
fi

echo -n "application/epub+zip" > mimetype

# exactly one trailing '/' please
if [[ -n "$OPS" ]] ; then
    OPS=$( echo ${OPS} | sed 's;/*$;/;' )
fi

mkdir -p META-INF
{  # write META-INF/container.xml
echo '<?xml version="1.0" encoding="utf-8"?>'
echo '  <container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">'
echo '    <rootfiles>'
echo '      <rootfile full-path="'${OPS}'content.opf" media-type="application/oebps-package+xml" />'
echo '    </rootfiles>'
echo '  </container>'
} > META-INF/container.xml

FILES="META-INF/container.xml"

AUTHORMUNGE=""
for (( c=${#AUTHOR[@]} - 1 ; $c > -1 ; c-- )) ; do
	if [[ c -gt 0 ]] ; then
		j="${join:- and }"
	else
		j=""
	fi
	AUTHORMUNGE="${j}${AUTHOR[${c}]%|*}${AUTHORMUNGE}"
	join=", "
done

# write titlepage.xhtml
if [[ -r ${OPS}titlepage.xhtml ]] ; then
    XTRA="${OPS}titlepage.xhtml"
else
    {
    echo '<!DOCTYPE html>'
    echo '<html xmlns="http://www.w3.org/1999/xhtml" lang="'${ELANG}'">'
    echo '<head><meta content="text/html; charset=utf-8" http-equiv="Content-Type" />'
    echo '  <title>'${TITLE[@]} - ${AUTHORMUNGE}'</title>'
    for f in ${CSS} ; do
        echo '  <link rel="stylesheet" href="'${f#${OPS}}'" type="text/css" />'
    done
    echo '</head><body class="titlepage">'
    echo '<!-- TTITLE Cover -->'

    if [[ -n "$COVER" ]] ; then
        echo '<div style="margin: 2% 0%; width: 100%; text-align: center;"><img src="'${COVER}'" alt="'${TITLE[@]} by ${AUTHORMUNGE}'" /></div>'
    else
        echo '<h1>'${TITLE[@]}'</h1><h2>'${AUTHORMUNGE}'</h2>'
    fi

    echo '</body></html>'
    } > ${OPS}titlepage.xhtml

    FILES="${OPS}titlepage.xhtml ${FILES}"
fi


{  # write content.opf
echo '<?xml version="1.0" encoding="utf-8"?>'
echo '<package xmlns="http://www.idpf.org/2007/opf" version="3.0" unique-identifier="pub-id">'
echo '  <metadata xmlns:dc="http://purl.org/dc/elements/1.1/">'

# REQUIRED
echo '    <dc:language>'${ELANG}'</dc:language>'
echo '    <dc:identifier id="pub-id">urn:uuid:'${UUID}'</dc:identifier>'
echo '      <meta property="dcterms:modified">'$( date -Iseconds -u | sed 's/+00:00/Z/' )'</meta>'
echo '    <dc:rights>'${LICENSE}'</dc:rights>'
for f in "${TITLE[@]}" ; do
    echo '    <dc:title>'${f}'</dc:title>'
done

c=0
for f in "${AUTHOR[@]}" ; do
    echo '    <dc:creator id="author'${c}'">'${f%|*}'</dc:creator>'
    echo '      <meta property="role" scheme="marc:relators" refines="#author'${c}'">aut</meta>'
    if echo "$f" | grep -q '|' ; then
        echo '      <meta property="file-as" refines="#author'${c}'">'${f#*|}'</meta>'
    fi
    let c++
done
if [[ -n "$DATE" ]] ; then
    echo '    <dc:date>'${DATE}'</dc:date>'
fi
if [[ -n "$TRANSLATOR" ]] ; then
    echo '    <dc:contributor id="translator">'${TRANSLATOR}'</dc:contributor>'
    echo '      <meta property="role" scheme="marc:relators" refines="#translator">trl</meta>'
fi
if [[ -n "$PUBLISHER" ]] ; then
    echo '    <dc:publisher>'${PUBLISHER}'</dc:publisher>'
fi
if [[ -n "$MAKER" ]] ; then
    echo '    <dc:contributor id="creator">'${MAKER}'</dc:contributor>'
    echo '      <meta property="role" scheme="marc:relators" refines="#creator">bkp</meta>'
fi
for f in "${SUBJECT[@]}" ; do
    echo '    <dc:subject>'${f}'</dc:subject>'
done
if [[ -r description ]] ; then
    sed -e '1 s;^;    <dc:description>;' -e '$ s;$;</dc:description>\n;' description
fi

echo '    <meta content="aov-html2epub" name="dtb:generator" />'

echo '  </metadata>'
echo '  <manifest>'

if [[ -n "$COVER" ]] ; then
    echo '    <item href="'${COVER}'" id="cover" properties="cover-image" media-type="'$( file -b --mime-type ${OPS}${COVER} )'" />'
    COVER=${OPS}${COVER}
fi

for f in ${OPS}titlepage.xhtml ${HTML} ; do
    echo '    <item href="'${f#${OPS}}'" id="'${f##*/}'" media-type="application/xhtml+xml" />'
done

for f in ${CSS} ; do
    echo '    <item href="'${f#${OPS}}'" id="'${f##*/}'" media-type="text/css" />'
done

for f in ${IMAGE[*]} ; do
    echo '    <item href="'${f#${OPS}}'" id="'${f##*/}'" media-type="'$( file -b --mime-type ${f} )'" />'
done

for f in ${TTF} ; do
    echo '    <item href="'${f#${OPS}}'" id="'${f##*/}'" media-type="application/octet-stream" />'
done

echo '    <item href="toc.ncx" id="toc.ncx" media-type="application/x-dtbncx+xml" />'
echo '    <item href="toc.xhtml" id="toc.xhtml" properties="nav" media-type="application/xhtml+xml" />'
echo '  </manifest>'
echo '  <spine toc="toc.ncx">'

for f in titlepage.xhtml toc.xhtml ${HTML} ; do
    echo '    <itemref idref="'${f/*\//}'" />'
done

echo '  </spine>'
echo '  <guide>'
#if [[ -n "$COVER" ]] ; then
#    echo '    <reference href="'${COVER}'" type="cover" title="Cover" />'
#fi
echo '    <reference href="titlepage.xhtml" type="title-page" title="Title page" />'
echo '  </guide>'
echo '</package>'
} > ${OPS}content.opf

FILES="${OPS}content.opf ${FILES}"



# write DEPRECATED EPUB2 TOC
exec 3> ${OPS}toc.ncx
# write EPUB3 NAV
exec 4> ${OPS}toc.xhtml

{    # BEGIN TOC PROCESSING
echo '<?xml version="1.0" encoding="utf-8"?>'
#<!DOCTYPE ncx PUBLIC "-//NISO//DTD ncx 2005-1//EN" "http://www.daisy.org/z3986/2005/ncx-2005-1.dtd">
echo '<ncx xmlns="http://www.daisy.org/z3986/2005/ncx/" version="2005-1" xml:lang="'${ELANG}'">'
echo '  <head>'
echo '    <meta content="'${UUID}'" name="dtb:ui" />'
echo '    <meta content="2" name="dtb:depth" />'
echo '    <meta content="aov-html2epub" name="dtb:generator" />'
echo '    <meta content="0" name="dtb:totalPageCount" />'
echo '    <meta content="0" name="dtb:maxPageNumber" />'
echo '  </head>'
echo '  <docTitle>'
echo '    <text>'${TITLE[@]}'</text>'
echo '  </docTitle>'
echo '  <docAuthor>'
echo '    <text>'${AUTHORMUNGE}'</text>'
echo '  </docAuthor>'
echo '  <navMap>'
echo '    <navPoint id="titlepage.xhtml" playOrder="1">'
echo '      <navLabel><text>Title page</text></navLabel>'
echo '      <content src="titlepage.xhtml" />'
} >&3

{
echo '<?xml version="1.0" encoding="utf-8"?>'
echo '<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops"'
echo '  xml:lang="'${ELANG}'" lang="'${ELANG}'">'
echo '<head>'
echo '  <title>'${TITLE[@]}'</title>'
for f in ${CSS} ; do
    echo '  <link rel="stylesheet" href="'${f#${OPS}}'" type="text/css" />'
done
echo '  <meta charset="utf-8" />'
echo '</head>'
echo '<body>'
echo '  <section class="toc" epub:type="toc">'
echo '    <header>'
echo '      <h2>Contents</h2>'
echo '    </header>'
echo '    <nav epub:type="toc" id="toc">'
echo '      <ol class="epub3toc0">'
echo -n '        <li><a epub:type="titlepage" href="titlepage.xhtml">Cover</a>'
} >&4


# XHTML IDs: match  [A-Za-z][A-Za-z0-9:_.-]*
# https://www.w3.org/TR/xhtml1/#C_8
# HTML5 IDs: unique in the document; no spaces; at least one char

oonest=$( mktemp )

sed -Enf $LIB/ttitle.sed ${HTML} | paste - -  | sed -e "s;^${OPS};;" | while IFS="	" read f i t
do
    echo ${onest:=0} ${ogap:=} ${oltrack:=1} ${ID:=2} > /dev/null

    ngap=$( printf '%*s' $(( $i * 2 )) )

    if (( $onest >= $i )); then
        echo "$ogap    </navPoint>" >&3

        echo '</li>' >&4
    fi

    for (( ; $onest < $i ; onest++ )) ; do
        #echo >&3

        printf '\n%s        <ol class="epub3toc%s epub3toc%d">\n' \
            "$ngap" $( awk 'BEGIN { printf "%c", 96+'${i}'}' ) ${oltrack} >&4
        let oltrack++
    done

    for (( ; $onest > $i ; onest-- )) ; do
        echo "$ogap        </ol>" >&4
        echo "$ogap      </li>"   >&4

        ogap="${ogap#  }"
        echo "$ogap    </navPoint>" >&3
    done

    printf '%s    <navPoint id="%s" playOrder="%d">
%s      <navLabel><text>%s</text></navLabel>
%s      <content src="%s" />\n' \
        "$ngap" "${f##*/}" "$ID" \
        "$ngap" "${t:=${ID}}" \
        "$ngap" "${f}" >&3

    t=$( echo $t | sed -E 's/([0-9]|[ivxlcdm]|[IVXLCDM])+\. +//' )

    printf '%s        <li><a epub:type="chapter" href="%s">%s</a>' \
        "$ngap" "${f}" "$t" >&4

    echo -n $onest > $oonest
    ogap="$ngap"

    let ID++

done

echo '</li>' >&4

onest=$( cat $oonest )
for (( ; $onest > 0 ; onest-- )) ; do
    ogap=$( printf '%*s' $(( ${onest}    * 2 )) )
    echo "$ogap    </navPoint>" >&3

    echo "$ogap        </ol>" >&4
    echo "$ogap      </li>"   >&4
done

{
echo '    </navPoint>'
echo '  </navMap>'
} >&3

{
echo '      </ol>'
echo '    </nav>'
echo '  </section>'
} >&4

## BEGIN PAGE PROCESSING

plist=$( mktemp )
sed -ne '/epub:type=.pagebreak/ { s/.* id="// ; s/".*// ; F ; p }' ${HTML} | \
    paste - - | sed -e "s;^${OPS};;" > $plist


if [[ -s $plist ]]
then
    {
    echo
    echo '  <pageList>'
    echo '    <navLabel>'
    echo '      <text>Pages</text>'
    echo '    </navLabel>'

    sed -E -e 's/	.*/&&/' -e 's;	[pPaAgGeE]+[-_]*;	;' $plist | while IFS='	' read f n p
    do
        # leaving out playOrder for now
        printf '    <pageTarget type="normal" id="%s" value="%s">
      <navLabel><text>%s</text></navLabel>
      <content src="%s#%s"/>
    </pageTarget>\n' ${p} ${n} ${n} "${f}" ${p}
    done

    echo '  </pageList>'
    } >&3

    {
    echo '  <nav epub:type="page-list" hidden="hidden">'
    echo '    <ol>'
    sed -E -e 's/	.*/&&/' -e 's;^;      <li><a href=";' -e 's;	;#;' \
           -e 's;	;">&;'  -e 's;	[pPaAgGeE]+[-_]*;;'   -e 's;$;</a></li>;' $plist
    echo '    </ol>'
    echo '  </nav>'
    } >&4
fi

# END PAGE PROCESSING

echo '</ncx>' >&3

printf '</body>\n</html>\n' >&4

exec 3>&- 4>&-
rm $oonest $plist

FILES="${OPS}toc.ncx ${OPS}toc.xhtml $FILES"

# END TOC PROCESSING


zip ${EPUB} -X -Z store mimetype
zip ${EPUB} -X -9 ${TTF} ${IMAGE[*]} ${HTML} ${CSS} ${COVER} ${XTRA} ${FILES}

if ! ${DEBUG} ; then
    rm mimetype ${FILES}
    rmdir META-INF
fi

exit 0

