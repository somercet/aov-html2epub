#!/bin/bash

# Converts an HTML file to EPUB format
#
# Peter Buxton <somercet@gmail.com>
# Angel Ortega <angel@triptico.com>
# Shakna Israel <s4b3r6@gmail.com>
#
# Public domain

EPUB="$1"
shift

TITLE=""
AUTHOR=""
COVER=""
HTML=""
CSS=""
LANG="en"
SUBJECT=""
CREATOR=""
PUBLISHER=""
UUID="c5be00f9-932e-4903-8cd9-b4b5939411a6"

if [ -z "$EPUB" ] ; then
    echo "Usage: $0 {epub file} [options] {HTML file(s)}"
    echo
    echo "Options:"
    echo "-t \"title\"            Book title"
    echo "-a \"author\"           Book author"
    echo "-s \"subject\"          Book sunject"
    echo "-w \"creator\"          Book creator"
    echo "-p \"publisher\"        Book publisher"
    echo "-c cover_image.png    Cover image (PNG format)"
    echo "-l lang               Language (en, es, fr...)"
    exit 1
fi

# parse arguments
while [ $# -ne 0 ] ; do

    case $1 in
    -t)         TITLE="$2"                      ; shift ;;
    -a)         AUTHOR="$2"                     ; shift ;;
    -c)         COVER="$2"                      ; shift ;;
    -l)         LANG="$2"                       ; shift ;;
    -s)         SUBJECT="$2"                    ; shift ;;
    -w)         CREATOR="$2"                    ; shift ;;
    -p)         PUBLISHER="$2"                  ; shift ;;
    *.css)      CSS="${CSS} $1"                         ;;
    *.xhtml)    HTML="${HTML} $1"                       ;;
    *.html)     HTML="${HTML} $1"                       ;;
    *)          echo "$0: invalid argument $1" ; exit 1 ;;
    esac

    shift

done

if [ -z "$HTML" ] ; then
    echo "$0: No HTML files; aborting"
    exit 2
fi

rm -f ${EPUB}

##################################################

# if the uuidgen utility is installed, generate an UUID
if which uuidgen 2>&1 >/dev/null ; then
    UUID="$(uuidgen)"
fi

echo -n "application/epub+zip" > mimetype

O="titlepage.xhtml"
> ${O}

{
echo "<?xml version='1.0' encoding='utf-8'?>"
echo '<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">'
echo '<head><title>'${TITLE} - ${AUTHOR}'</title></head><body>'

if [ ! -z "${COVER}" ] ; then
    echo '<div><img src="'${COVER}'" alt="cover image" /></div>'
else
    echo '<h1>'${TITLE}'</h1><h2>'${AUTHOR}'</h2>'
fi

echo '</body></html>'
} >> ${O}


mkdir -p META-INF
O="META-INF/container.xml"
> ${O}

{
echo '<?xml version="1.0"?>'
echo '<container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">'
echo '   <rootfiles>'
echo '      <rootfile full-path="content.opf" media-type="application/oebps-package+xml" />'
echo '   </rootfiles>'
echo '</container>'
} >> ${O}


O=content.opf
>${O}

{
echo '<?xml version="1.0" encoding="utf-8"?>'
echo '<package xmlns="http://www.idpf.org/2007/opf" version="2.0" unique-identifier="uuid_id">'
echo '  <metadata xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:opf="http://www.idpf.org/2007/opf" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:calibre="http://calibre.kovidgoyal.net/2009/metadata" xmlns:dc="http://purl.org/dc/elements/1.1/">'
echo "    <dc:language>${LANG}</dc:language>"
echo "    <dc:title>${TITLE} - ${AUTHOR}</dc:title>"
echo "    <dc:identifier id='uuid_id' opf:scheme='uuid'>${UUID}</dc:identifier>"
echo "    <dc:date>$(date +%Y-%m-%d)</dc:date>"
echo "    <dc:subject>${SUBJECT}</dc:subject>"
echo "    <dc:creator>${CREATOR}</dc:creator>"
echo "    <dc:publisher>${PUBLISHER}</dc:publisher>"
echo '    <dc:rights>Creative Commons BY-SA 3.0 License.</dc:rights>'
echo '  </metadata>'
echo '  <manifest>'

if [ ! -z "$COVER" ] ; then
    echo '    <item href="'${COVER}'" id="cover" media-type="image/png" />'
fi

echo '    <item href="titlepage.xhtml" id="titlepage.xhtml" media-type="application/xhtml+xml" />'

for f in ${HTML} ; do
    echo '    <item href="'${f}'" id="'$( basename ${f} )'" media-type="application/xhtml+xml" />'
done

for f in ${CSS} ; do
    echo '    <item href="'${f}'" id="'$( basename ${f} )'" media-type="text/css" />'
done

echo '    <item href="toc.ncx" media-type="application/x-dtbncx+xml" id="ncx" />'
echo '  </manifest>'
echo '  <spine toc="ncx">'

echo '    <itemref idref="'titlepage.xhtml'" />'

for f in ${HTML} ; do
    echo '    <itemref idref="'$( basename ${f} )'" />'
done

echo '  </spine>'
echo '  <guide>'
echo '    <reference href="titlepage.xhtml" type="cover" title="Cover" />'
echo '  </guide>'
echo '</package>'
} >> ${O}


O=toc.ncx
> ${O}

{
echo '<?xml version="1.0" encoding="utf-8"?>'
echo '<ncx xmlns="http://www.daisy.org/z3986/2005/ncx/" version="2005-1" xml:lang="'${LANG}'">'
echo '  <head>'
echo '    <meta content="'${UUID}'" name="dtb:ui" />'
echo '    <meta content="2" name="dtb:depth" />'
echo '    <meta content="aov-html2epub" name="dtb:generator" />'
echo '    <meta content="0" name="dtb:totalPageCount" />'
echo '    <meta content="0" name="dtb:maxPageNumber" />'
echo '  </head>'
echo '  <docTitle>'
echo '    <text>'${TITLE} - ${AUTHOR}'</text>'
echo '  </docTitle>'
echo '  <navMap>'

ID=1
for f in ${HTML} ; do
    echo '    <navPoint id="'$( basename ${f} )'" playOrder="'${ID}'">'
    echo '      <navLabel><text>'${ID}'</text></navLabel>'
    echo '      <content src="'${f}'" />'
    echo '    </navPoint>'

    let ID++
done

echo '  </navMap>'
echo '</ncx>'
} >> ${O}


FILES="META-INF titlepage.xhtml content.opf toc.ncx"

zip ${EPUB} -X -Z store mimetype
zip ${EPUB} -X -r ${FILES} ${COVER} ${CSS} ${HTML}

rm -rf mimetype ${FILES}

exit 0
