#!/bin/bash

# Converts an HTML file to EPUB 3.0 format
#
# Peter Buxton <somercet@gmail.com>
# Angel Ortega <angel@triptico.com>
# Shakna Israel <s4b3r6@gmail.com>
#
# Public domain

EPUB=""
TITLE=""
AUTHOR=""
FILEAS=""
COVER=""
HTML=""
CSS=""
TTF=""
IMAGE=""
ELANG="en-US"
SUBJECT=""
CREATOR=""
TRANSLATOR=""
PUBLISHER=""
LICENSE="none"
UUID=""

TP=1

usage () {
    cat << EOM >> /dev/stderr
Usage: $( basename $0 ) [EPUB FILE] [OPTION]... [FILE]...

Options:
 -t title            Title *required*
 -a author           Author 'First Last'
 -f file-as          Author 'Last, First'
 -s subject          Subject(s)
 -p creator          Creator
 -P publisher        Publisher
 -T translator       Translator
 -c cover.img        Cover image
 -l lang             Language (RFC 4646, default "en-US")
 -L licence          Default "none"
 -u UUID             Universal Unique ID
EOM
}

# parse arguments
while [[ $# -ne 0 ]]
do
    case $1 in
    -t)         TITLE="$2"                      ; shift ;;
    -a)         AUTHOR="$2"                     ; shift ;;
    -f)         FILEAS="$2"                     ; shift ;;
    -c)         COVER="$2"                      ; shift ;;
    -l)         ELANG="$2"                      ; shift ;;
    -p)         CREATOR="$2"                    ; shift ;;
    -P)         PUBLISHER="$2"                  ; shift ;;
    -T)         TRANSLATOR="$2"                 ; shift ;;
    -u)         UUID="$2"                       ; shift ;;
    -L)         LICENSE="$2"                    ; shift ;;
    -s)         SUBJECT="${SUBJECT} $2"         ; shift ;;
    *.epub)     EPUB="$1"                               ;;
    *.xhtml | *.html)
                HTML="${HTML} $1"                       ;;
    *.jpg | *.png | *.gif)
                IMAGE="${IMAGE} $1"                     ;;
    *.ttf | *.woff)
                TTF="${TTF} $1"                         ;;
    *.css)      CSS="${CSS} $1"                         ;;
    *)          echo "$0: invalid argument $1" > /dev/stderr
                     usage
                     exit 1 ;;
    esac
    shift
done

{  # error checks
    if [[ -z "$HTML" ]] ; then
        echo "$0: No HTML files; aborting."
        exit 2
    elif [[ -z "$EPUB" ]] ; then
        echo "$0: No EPUB file named; aborting."
        exit 2
    elif [[ -w . ]] ; then
        rm -f ${EPUB}
    else
        echo "$0: No write permission in $PWD; aborting."
        exit 3
    fi
} > /dev/stderr

##################################################

if [[ -z "$UUID" ]] ; then
    if which uuidgen 2>&1 >/dev/null ; then
        UUID="$(uuidgen)"
    else
        UUID="c5be00f9-932e-4903-8cd9-b4b5939411a6"
    fi
fi

echo -n "application/epub+zip" > mimetype


mkdir -p META-INF

{  # write META-INF/container.xml
echo '<?xml version="1.0" encoding="utf-8"?>'
echo '  <container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container">'
echo '    <rootfiles>'
echo '      <rootfile full-path="content.opf" media-type="application/oebps-package+xml" />'
echo '    </rootfiles>'
echo '  </container>'
#echo '      <rootfile full-path="OPS/package.opf" media-type="application/oebps-package+xml"/>'
} > META-INF/container.xml


# write titlepage.xhtml
if [[ -r titlepage.xhtml ]] ; then
    TP=0
else
    {
    echo '<!DOCTYPE html>'
    echo '<html xmlns="http://www.w3.org/1999/xhtml" lang="'${ELANG}'">'
    echo '<head><title>'${TITLE} - ${AUTHOR}'</title>'
    for f in ${CSS} ; do
        echo '<link rel="stylesheet" href="'${f}'" type="text/css" />'
    done
    echo '</head><body class="titlepage">'
    echo '<!-- TTITLE Cover -->'

    if [[ -n "$COVER" ]] ; then
        echo '<div style="text-align: center;"><img src="'${COVER}'" alt="'${TITLE} by ${AUTHOR}'" /></div>'
    else
	echo $COVER
        echo '<h1>'${TITLE}'</h1><h2>'${AUTHOR}'</h2>'
    fi

    echo '</body></html>'
    } > titlepage.xhtml
fi


{  # write content.opf
echo '<?xml version="1.0" encoding="utf-8"?>'
echo '<package xmlns="http://www.idpf.org/2007/opf" version="3.0" unique-identifier="uuid_id">'
echo '  <metadata xmlns:dc="http://purl.org/dc/elements/1.1/">'

# REQUIRED
echo '    <dc:title>'${TITLE}'</dc:title>'
echo '    <dc:language>'${ELANG}'</dc:language>'
echo '    <dc:identifier id="uuid_id">'${UUID}'</dc:identifier>'

f=$( date -Iseconds -u | sed 's/+00:00/Z/' )
echo '    <dc:date>'${f/-*/}'</dc:date>'
echo '    <meta property="dcterms:modified">'${f}'</meta>'
echo '    <dc:rights>'${LICENSE}'</dc:rights>'

if [[ -n "$AUTHOR" ]] ; then
    echo '    <dc:creator id="author">'${AUTHOR}'</dc:creator>'
    echo '    <meta refines="#author" property="role" scheme="marc:relators">aut</meta>'
    if [ -n "$FILEAS" ] ; then
        echo '    <meta refines="#author" property="file-as">'${FILEAS}'</meta>'
    fi
fi
if [[ -n "$TRANSLATOR" ]] ; then
    echo '    <dc:contributor id="translator">'${TRANSLATOR}'</dc:contributor>'
    echo '    <meta refines="#translator" property="role" scheme="marc:relators">trl</meta>'
fi
if [[ -n "$PUBLISHER" ]] ; then
    echo '    <dc:publisher>'${PUBLISHER}'</dc:publisher>'
fi
if [[ -n "$CREATOR" ]] ; then
    echo '    <dc:contributor id="creator">'${CREATOR}'</dc:contributor>'
    echo '    <meta refines="#creator" property="role" scheme="marc:relators">bkp</meta>'
fi
if [[ -r description ]] ; then
    sed -e '1 s;^;    <dc:description>;' -e '$ s;$;</dc:description>\n;' description
fi
for f in ${SUBJECT} ; do
    echo '    <dc:subject>'${f}'</dc:subject>'
done

#echo '    <meta content="aov-html2epub" name="dtb:generator" />'

echo '  </metadata>'
echo '  <manifest>'

if [[ -n "$COVER" ]] ; then
    echo '    <item href="'${COVER}'" id="cover" properties="cover-image" media-type="'$( file -b --mime-type ${COVER} )'" />'
fi

echo '    <item href="titlepage.xhtml" id="titlepage.xhtml" media-type="application/xhtml+xml" />'

for f in ${HTML} ; do
    echo '    <item href="'${f}'" id="'${f/*\//}'" media-type="application/xhtml+xml" />'
done

for f in ${CSS} ; do
    echo '    <item href="'${f}'" id="'${f/*\//}'" media-type="text/css" />'
done

for f in ${IMAGE} ; do
    echo '    <item href="'${f}'" id="'${f/*\//}'" media-type="'$( file -b --mime-type ${f} )'" />'
done

for f in ${TTF} ; do
    echo '    <item href="'${f}'" id="'${f/*\//}'" media-type="application/octet-stream" />'
done

echo '    <item href="toc.ncx" id="ncx" media-type="application/x-dtbncx+xml" />'
echo '    <item href="toc.xhtml" id="toc" properties="nav" media-type="application/xhtml+xml" />'
echo '  </manifest>'
echo '  <spine toc="ncx">'

for f in titlepage.xhtml ${HTML} ; do
    echo '    <itemref idref="'${f/*\//}'" />'
done

echo '  </spine>'
echo '  <guide>'
#if [[ -n "$COVER" ]] ; then
#    echo '    <reference href="'${COVER}'" type="cover" title="Cover" />'
#fi
echo '    <reference href="titlepage.xhtml" type="title-page" title="Title page" />'
echo '  </guide>'
echo '</package>'
} > content.opf


# write DEPRECATED EPUB2 TOC
exec 3> toc.ncx
# write EPUB3 NAV
exec 4> toc.xhtml
# write possible TOC.XHTML PPAGES
ppagelist=$( mktemp )
exec 5> $ppagelist
# write possible PPAGE edits to XHTML
ppageedits=$( mktemp )
exec 6> $ppageedits

breaker=$( mktemp )
cat << EOM > $breaker
s/[\t ]+-->//
s/:<!--[\t ]*/:/
s/[\t ]+/" "/
s/$/" )/
s/:/" "/
s/^/( "/
EOM

{
echo '<?xml version="1.0" encoding="utf-8"?>'
echo '<ncx xmlns="http://www.daisy.org/z3986/2005/ncx/" version="2005-1" xml:lang="'${ELANG}'">'
echo '  <head>'
echo '    <meta content="'${UUID}'" name="dtb:ui" />'
echo '    <meta content="2" name="dtb:depth" />'
echo '    <meta content="aov-html2epub" name="dtb:generator" />'
echo '    <meta content="0" name="dtb:totalPageCount" />'
echo '    <meta content="0" name="dtb:maxPageNumber" />'
echo '  </head>'
echo '  <docTitle>'
echo '    <text>'${TITLE}'</text>'
echo '  </docTitle>'
echo '  <docAuthor>'
echo '    <text>'${AUTHOR}'</text>'
echo '  </docAuthor>'
echo '  <navMap>'
echo '    <navPoint id="titlepage.xhtml" playOrder="1">'
echo '      <navLabel><text>Title page</text></navLabel>'
echo '      <content src="titlepage.xhtml" />'
} >&3

{
echo '<?xml version="1.0" encoding="utf-8"?>'
echo '<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops"'
echo '  xml:lang="'${ELANG}'" lang="'${ELANG}'">'
echo '<head>'
echo '  <title>'${TITLE}'</title>'
for f in ${CSS} ; do
    echo '  <link rel="stylesheet" href="'${f}'" type="text/css" />'
done
echo '  <meta charset="utf-8" />'
echo '</head>'
echo '<body>'
echo '  <section class="toc" epub:type="toc">'
echo '    <header>'
echo '      <h1>Contents</h1>'
echo '    </header>'
echo '    <nav xmlns:epub="http://www.idpf.org/2007/ops" epub:type="toc" id="toc">'
echo '      <ol class="epub3toc0">'
echo -n '        <li><a epub:type="titlepage" href="titlepage.xhtml">Title page</a>'
} >&4


ID=2
oonest=$( mktemp )
echo -n 0 > $oonest

for f in ${HTML}
do
    TT=0
    egrep -n -o '<!--[^>]*(TTITLE|PPAGE)[^>]*-->' ${f} | sed -E -f $breaker | while read a
    do
	declare -a LN
        eval LN=$a
        onest=$( cat $oonest )

        if [[ "${LN[1]}" = "PPAGE" ]]; then
            echo '<li><a href="'${f}'#page'${LN[2]}'">'${LN[2]}'</a></li>' >&5
            echo ${LN[0]} 's;$;<span class="pages" id="page'${LN[2]}'"></span>;' >&6
            # TODO s/<!--.*PPAGE[\t ]*
        else
            TT=1
            LN[1]=${LN[1]#TTITLE}
            ngap=$( printf '%*s' $(( ${LN[1]:=0} * 2 )) )
            ogap=$( printf '%*s' $(( ${onest}    * 2 )) )

            if (( $onest >= ${LN[1]:=0} )); then
                echo "$ogap    </navPoint>" >&3

                echo '</li>' >&4
            fi

            for (( ; $onest < ${LN[1]} ; onest++ )) ; do
                #echo >&3

                echo >&4
                echo "$ngap        <ol>" >&4
            done

            for (( ; $onest > ${LN[1]} ; )) ; do
                echo "$ogap        </ol>" >&4
                echo "$ogap      </li>"   >&4
                let onest--
                ogap=$( printf '%*s' $(( ${onest}    * 2 )) )

                echo "$ogap    </navPoint>" >&3
            done

            echo "$ngap    <navPoint id=\"$( basename ${f} )\" playOrder=\"${ID}\">" >&3
            echo "$ngap      <navLabel><text>${LN[2]:=${ID}}</text></navLabel>" >&3
            echo "$ngap      <content src=\"${f}\" />" >&3

            echo -n "$ngap        <li><a epub:type=\"chapter\" href=\"${f}\">${LN[2]}</a>" >&4

            echo -n $onest > $oonest
        fi

        unset LN
    done
    let ID++


done

echo '    </navPoint>' >&3
echo '  </navMap>' >&3
echo '</ncx>' >&3

echo '</li>' >&4

onest=$( cat $oonest )
for (( ; $onest > 0 ; )) ; do
    let oonest--

    ogap=$( printf '%*s' $(( $onest * 2 )) )
    echo "$ogap          </ol>" >&4
    echo "$ogap        </li>"   >&4
done

{
echo '      </ol>'
echo '    </nav>'
echo '  </section>'
echo '</body>'
echo '</html>'
} >&4

rm $breaker $oonest $ppagelist $ppageedits

exec 3>&- 4>&- 5>&- 6>&-

# END TOC PROCESSING


#  <nav epub:type="page-list">
#    <ol>
#      <li><a href="georgia.xhtml#page752">752</a></li>
#      <li><a href="georgia.xhtml#page753">753</a></li>
#    </ol>
#  </nav>
#
# /home/peter/aov-html2epub/epub3-samples/30/georgia-pls-ssml/EPUB/nav.xhtml

FILES="toc.xhtml toc.ncx content.opf META-INF"

zip ${EPUB} -X -Z store mimetype
zip ${EPUB} -X -r ${TTF} ${IMAGE} ${CSS} ${HTML} titlepage.xhtml ${COVER} ${FILES}

rm -rf mimetype ${FILES}
[[ "$TP" -eq 1 ]] && rm titlepage.xhtml

exit 0

