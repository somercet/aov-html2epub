.Dd April 15, 2021
.Os Unix
.Dt aov-html2epub 1 URM
.Sh NAME
.Nm aov-html2epub
.Nd Takes a list of HTML5 files and turns them into an EPUB, version 3, with back-compatibility for v2.
.Sh SYNOPSIS
.Nm
.Ar EPUB_FILE
.Fl t Ar title
.Op Fl a Ar name Ns Op Ar |filebyname
.Op Fl d Ar date
.Op Fl s Ar subject
.Op Fl m Ar maker
.Op Fl p Ar publisher
.Op Fl x Ar translator
.Op Fl c Ar cover.img
.Op Fl l Ar lang
.Op Fl r Ar rights
.Op Fl u Ar uuid
.Op Fl b Ar subdir
.Op Fl -debug
.Ar
.Sh DESCRIPTION
.Nm
zips
.Pa *.html
and other files into an EPUB with a correct
.Pa mimetype
file (stored, not deflated).
The only
.Em requirements
to build an EPUB are: the EPUB name, a title, and one or more HTML5 files.
The order of command line arguments is generally unimportant
.Em except
to HTML files and, if given more than once, the
.Fl a Ar author
and
.Fl t Ar title
arguments, see below.
.Pp
Tables of contents (TOCs) for EPUB2 and 3 are generated for the HTML files.
Nested TOCs are supported.
All HTML files will be added to the EPUB reading order
.Em exactly as given on the command line .
Font
.Po
.Pa *.ttf
and
.Pa *.woff
.Pc ,
CSS, and image files may be included by listing them on the command line;
.Nm
will catalog them properly in the OPF file manifest.
.Pp
Subject, author, and title may be specified more than once.
.Pp
.Nm
generates these files, which are all deleted after the EPUB is built:
.Bd -ragged -offset indent
.Bl -column
.It Pa mimetype Ta Pa META-INF/container.xml
.It Pa toc.ncx Ta Pa content.opf
.It Pa toc.xhtml Ta Pa titlepage.xhtml
.El
.Ed
.Pp
A customized yet basic title page will be generated unless you provide one in the build directory.
If a cover image is provided, it will be the only element visible on the title page.
If the file
.Pa description
exists (which should contain one or more lines of UTF-8 text, and no HTML),
it will be added to the OPF file’s “dc:description” section.
.Pp
.Xr file 1
is used to identify the MIME types of non-HTML files.
.Xr zip 1
is used to generate the EPUB.
If
.Fl u
is not specified,
.Xr uuidgen 1
will be used to generate a random UUID, if present.
For consistency, randomly generate a single UUID for each book and specify it each time you build.
.Pp
The EPUB standard allows the OPF file (and every other file) to be in the base directory of the ZIP file,
along with
.Pa mimetype
and
.Pa META-INF/ .
But it is cleaner and more correct to place these files in a subdirectory, canonically
.Pa OPS
or
.Pa OEBPS ,
with
.Fl b Ar OPS ,
which builds the generated files in that subdir, and sets the correct relative filepaths in the OPF and TOC files.
.Pp
No ungenerated files should be moved, modified, or deleted by this program.
.Sh OPTIONS
.Bl -tag
.It Fl t Ar title
Book title, one (or more) is
.Em required .
Command line order will be preserved in the OPF.
.It Fl a Ar name Ns Op Ar |filebyname
Author name and (optional) file-by name, separated with a pipe character
.Pq Qq First Last|Last, First ,
with one
.Fl a
per author.
Command line order of options is important only for multiple authors (and HTML files),
since the first
.Fl a
listed is considered the primary author by many EPUB readers.
.It Fl d Ar date
Publishing date (ISO 8601), e.g. July 1999 is "1999-07".
.It Fl s Ar subject
Subject(s), zero or more, one
.Fl s
per subject.
.It Fl m Ar maker
EPUB creator
.It Fl p Ar publisher
Publishing house
.It Fl x Ar translator
Translator
.It Fl c Ar cover.img
Cover image
.It Fl l Ar lang
Language (BCP 47), default "en-US"
.It Fl r Ar rights
Content copyright or license, default "CC BY-SA 4.0"
.It Fl u Ar uuid
Universal Unique ID
.It Fl b Ar subdir
Build subdirectory (OPS or OEBPS)
.It Fl -debug
Do not delete generated files
.El
.Sh EXAMPLES
The simplest example:
.Bd -literal
aov-html2epub Ross,_Bob.Happy_Trees.epub -t "Happy Trees" part1.html
part2.html part3.html
.Ed
.Pp
A more complex example:
.Bd -literal
aov-html2epub Ross,_Bob.Happy_Trees.epub -t "Happy Trees" default.css
-a "Bob Ross|Ross, Bob" -d 2001-12 -s Painting -s Trees -c treecover.jpg
-u c5be00f9-932e-4903-8cd9-b4b5939411a6 -p "Happy Tree Publishing House"
part1.html part2.html part3.html treesnewroman.ttf
.Ed
.Pp
A simple example using the
.Pa OEBPS
subdirectory. Note: with
.Fl b Ar OEBPS
set, this app will expect the cover image at
.Pa OEBPS/treecover.jpg :
.Bd -literal
aov-html2epub Ross,_Bob.Happy_Trees.epub -t "Happy Trees" -b OEBPS
-c treecover.jpg OEBPS/part1.html OEBPS/part2.html OEBPS/part3.html
OEBPS/default.css
.Ed
.Pp
By default,
.Nm
will create flat TOCs with one entry for each HTML file, numbered ordinally.
(Multiple TOC entries per file is not yet supported.)
To create TOCs with meaningful names and nesting, each file needs an HTML comment containing the
TTITLE keyword, a nesting number (no space), and a phrase.
So the TTITLE lines in the first 8 HTML files may read:
.Bd -literal
<!-- TTITLE   Preface -->
<!-- TTITLE   Epigraph -->
<!-- TTITLE1    I. Book I splash page -->
<!-- TTITLE2      1. The First Bit -->
<!-- TTITLE3        a. More Of The First -->
<!-- TTITLE3        b. Even More First -->
<!-- TTITLE   Interlude -->
<!-- TTITLE1    II. Book II splash page -->
.Ed
.Pp
(The extra spaces between the nesting numbers and the phrases are there only as a visual cue.)
TTITLE is the same as TTITLE0.
Nesting numbers may change by more than one.
Note the “outline” numbering: the
.Pa toc.ncx
file has no numbering, so it needs these, but they are stripped from the
.Pa toc.xhtml
file.
Instead, the base ordered list (OL) is given the CSS class name “epub3toca”,
and each subsequent OL is given two class names:
one numbered for every new OL, and one lettered according to its depth.
So the CSS classes for the above TTITLE entries would be:
.Bd -literal
epub3toca            Preface
epub3toca            Epigraph
epub3tocb epub3toc1	I. Book I splash page
epub3tocc epub3toc2	  1. The First Bit
epub3tocd epub3toc3	    a. More Of The First
epub3tocd epub3toc3	    b. Even More First
epub3toca            Interlude
epub3tocb epub3toc4	II. Book II splash page
.Ed
.Pp
The CSS files given on the command line are included in the
.Pa toc.xhtml
header, so this allows
fairly easy, fine-grained control over each OL, especially if you also use “li:first-child”
and “li:last-child”.
.Pp
EPUB2 and 3 page lists are also supported.
.Nm
looks for pagebreak spans like this:
.Dl <span epub:type="pagebreak" class="pages" id="page11"></span>
It then strips off this regex from the
.Pa id
element:
.Dl [pPaAgGeE]+[-_]*
and uses the remainder as the page number. Note: the above span uses non-HTML XML
namespaces, so be sure to add:
.Dl xmlns:epub="http://www.idpf.org/2007/ops"
to the
.Pa <html>
tag.
.Pp
.Xr make 1
is an excellent tool for building and updating EPUBs with this script, but, depending on how you
provide the HTML file names to make, you may want to
.Ic $(sort)
the file names to keep the files in reading order.
.Sh SEE ALSO
.Xr epubcheck 1 , Xr zip 1 , Xr uuidgen 1 , Xr file 1 .
.Pp
.Lk https://tools.ietf.org/html/bcp47 IETF BCP 47, “Tags for Identifying Languages”
.Pp
.Lk https://tools.ietf.org/html/rfc3339 IETF RFC 3339, “Date and Time on the Internet,” based on ISO 8601
.Sh LICENSE
“Released under the public domain. Use as you want, specially for evil.”
This program is publicly available at
.Lk https://github.com/somercet/aov-html2epub Github
.Sh AUTHORS
.An somercet
.An Angel Ortega Aq Mt angel@triptico.com
